import { Component, OnInit, OnDestroy } from '@angular/core';
import { StudentsService } from '../students.service';
import { CommonModule } from '@angular/common'; 
import { FormsModule } from '@angular/forms'; 
import { RouterModule } from '@angular/router';
import { Subscription } from 'rxjs';
import { SignalRService } from '../signalr.service';

@Component({
  selector: 'app-table',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule], 
  templateUrl: './table.component.html',
  styleUrls: ['./table.component.css'],
})
export class TableComponent implements OnInit, OnDestroy {
  tableData: any[] = [];
  filteredData: any[] = [];
  selectedStatus: string = 'all'; 
  private signalRSubscription!: Subscription;

  statusMapping: { [key: number]: string } = {
    0: '–û–∂–∏–¥–∞–π—Ç–µ',
    1: '–ü–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å',
    2: '–ó–∞—Å–µ–ª—è–µ—Ç—Å—è',
    3: '–ó–∞—Å–µ–ª–µ–Ω',
  };

  manualStartTime = new Date('2024-05-22T09:00:00'); // –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å

  constructor(
    private studentsService: StudentsService, 
    private signalRService: SignalRService
  ) { }

  ngOnInit(): void {
    this.signalRService.startConnection();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç SignalR
    this.signalRSubscription = this.signalRService.updates$.subscribe(() => {
      console.log("SignalR: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤");
      this.fetchData();
    });

    this.fetchData(); // –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  }

  fetchData(): void {
    this.studentsService.getStudents().subscribe((data) => {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ studentId –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
      this.tableData = data.sort((a, b) => a.studentId - b.studentId);
      this.calculateEstimatedTimes();
      console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ studentId:', this.tableData);
      this.onStatusChange(); // –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
    });
  }

  getStatusText(status: number): string {
    return this.statusMapping[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
  }

  onStatusChange(): void {
    if (this.selectedStatus === 'all') {
      this.filteredData = this.tableData.slice(); // –∫–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
    } else {
      this.filteredData = this.tableData.filter(
        (student) => student.status.toString() === this.selectedStatus
      );
    }
  
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ id (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
    this.filteredData.sort((a, b) => a.studentId - b.studentId);
  }
  

  formatDuration(duration: string | null): string | null {
    if (!duration) return null;
    return duration.split('.')[0];
  }

  sortData(column: string): void {
    this.filteredData.sort((a, b) => {
      if (a[column] < b[column]) return -1;
      if (a[column] > b[column]) return 1;
      return 0;
    });
  }

  ngOnDestroy(): void {
    if (this.signalRSubscription) {
      this.signalRSubscription.unsubscribe();
    }
  }

  calculateEstimatedTimes(): void {
    console.log('‚è≥ –†–∞—Å—á—ë—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–∑–æ–≤–∞ –Ω–∞—á–∞—Ç');
  
    const studentsWithCheckInTime = this.tableData.filter(s => s.checkInTime);
    console.log('‚úÖ –°—Ç—É–¥–µ–Ω—Ç—ã —Å checkInTime:', studentsWithCheckInTime);
  
    const avgDurationMs =
      studentsWithCheckInTime.length > 0
        ? studentsWithCheckInTime
            .map(s => this.parseDuration(s.checkInTime))
            .reduce((acc, val) => acc + val, 0) / studentsWithCheckInTime.length
        : 0;
  
    console.log('üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞—Å–µ–ª–µ–Ω–∏—è (–º–∏–Ω):', avgDurationMs/1000/60);
  
    const firstCheckInStart = this.tableData.find(s => s.checkInStart);
    const startTime = firstCheckInStart
      ? new Date(firstCheckInStart.checkInStart)
      : this.manualStartTime;
  
    console.log('üïí –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞—Å–µ–ª–µ–Ω–∏—è:', startTime);
  
    let position = 0;
  
    this.tableData.forEach((student, index) => {
      if (student.status === 0) {
        position++;
        const groupIndex = Math.floor(position / 5);
        const estimatedTime = new Date(startTime.getTime() + groupIndex * avgDurationMs);
        student.callTime = estimatedTime;
        console.log(`üìå –°—Ç—É–¥–µ–Ω—Ç ID ${student.id}: –ø–æ–∑–∏—Ü–∏—è ${position}, –≤—ã–∑–æ–≤ –≤ ${estimatedTime}`);
      } else {
        student.callTime = null;
      }
    });
  }
  
  
  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ HH:mm:ss
  parseDuration(duration: string): number {
    const [h, m, s] = duration.split(':').map(Number);
    return ((h * 60 + m) * 60 + s) * 1000;
  }
  
}
